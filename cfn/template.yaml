---
AWSTemplateFormatVersion: '2010-09-09'
Description: Public VPC and subnets

Resources:

  PublicVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      InstanceTenancy: default
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
      - Key: Name
        Value: IPv6-VPC

  IPv6CidrBlock:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      VpcId: !Ref PublicVpc
      AmazonProvidedIpv6CidrBlock: true


  #
  # Internet gateways (ipv4, and egress for ipv6)
  #
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: Public VPC Internet Access
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref PublicVpc
      InternetGatewayId: !Ref InternetGateway

  EgressOnlyInternetGateway:
    Type: AWS::EC2::EgressOnlyInternetGateway
    Properties: 
      VpcId: !Ref PublicVpc

  #
  # Routing - public subnets
  #
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref PublicVpc
      Tags:
      - Key: Name
        Value: Route Table for Public Subnets in Public VPC
  PublicSubnetDefaultRoute:
    DependsOn: InternetGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicSubnetRouteTable
      GatewayId: !Ref InternetGateway
  PublicSubnetDefaultIpv6Route:
    Type: AWS::EC2::Route
    Properties:
      DestinationIpv6CidrBlock: ::/0
      RouteTableId: !Ref PublicSubnetRouteTable
      EgressOnlyInternetGatewayId: !Ref EgressOnlyInternetGateway

  #
  # Routing - private subnets
  #
  PrivateSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref PublicVpc
      Tags:
      - Key: Name
        Value: Route Table for Private Subnets in Public VPC
  PrivateSubnetDefaultIpv6Route:
    Type: AWS::EC2::Route
    Properties:
      DestinationIpv6CidrBlock: ::/0
      RouteTableId: !Ref PrivateSubnetRouteTable
      EgressOnlyInternetGatewayId: !Ref EgressOnlyInternetGateway

  #
  # Access control   
  #
  PrivateSubnetsNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref PublicVpc
      Tags:
      - Key: Name
        Value: Private Subnet on Public VPC ACL
  PrivateSubnetsNetworkAclInboundEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateSubnetsNetworkAcl
      RuleNumber: 1
      PortRange: 
        From: 22 # SSH
        To: 22
      Protocol: 6 # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 10.0.0.0/16
  PrivateSubnetsNetworkAclIpv6OutboundEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateSubnetsNetworkAcl
      RuleNumber: 1
      Protocol: -1
      RuleAction: allow
      Egress: true
      Ipv6CidrBlock: ::/0
  PrivateSubnetsNetworkAclOutboundEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateSubnetsNetworkAcl
      RuleNumber: 2
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0

  #
  # Public subnet A   
  #
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/20
      Ipv6CidrBlock: 
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: '00::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt PublicVpc.Ipv6CidrBlocks ]]]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      VpcId: !Ref PublicVpc
      MapPublicIpOnLaunch: true
      AssignIpv6AddressOnCreation: true 
      Tags:
      - Key: Name
        Value: PublicSubnetA
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnetA

  #
  # Public subnet B   
  #
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.16.0/20
      Ipv6CidrBlock: 
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: '01::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt PublicVpc.Ipv6CidrBlocks ]]]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      VpcId: !Ref PublicVpc
      MapPublicIpOnLaunch: true
      AssignIpv6AddressOnCreation: true 
      Tags:
      - Key: Name
        Value: PublicSubnetB
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnetB      

  #
  # Private subnet A   
  #
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.32.0/20
      Ipv6CidrBlock: 
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: '02::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt PublicVpc.Ipv6CidrBlocks ]]]
      AssignIpv6AddressOnCreation: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      VpcId: !Ref PublicVpc
      Tags:
      - Key: Name
        Value: PrivateSubnetA
  PrivateSubnetAAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PrivateSubnetsNetworkAcl
      SubnetId: !Ref PrivateSubnetA
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable
      SubnetId: !Ref PrivateSubnetA

  #
  # Private subnet B   
  #
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.48.0/20
      Ipv6CidrBlock: 
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: '03::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt PublicVpc.Ipv6CidrBlocks ]]]
      AssignIpv6AddressOnCreation: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      VpcId: !Ref PublicVpc
      Tags:
      - Key: Name
        Value: PrivateSubnetB
  PrivateSubnetBAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PrivateSubnetsNetworkAcl
      SubnetId: !Ref PrivateSubnetB
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable
      SubnetId: !Ref PrivateSubnetB

Outputs:


    Ipv6CidrBlocks0:
      Description: Ipv6CidrBlocks0 
      Value:   !Select [ 0, !GetAtt PublicVpc.Ipv6CidrBlocks ] 

    Ipv6CidrBlocks0Split:
      Description: Ipv6CidrBlocks0Split 
      Value:   !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt PublicVpc.Ipv6CidrBlocks ]]]   