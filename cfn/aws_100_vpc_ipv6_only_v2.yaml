AWSTemplateFormatVersion: '2010-09-09'
Description: 'A dual Stack VPC with IPv6, 2 public and 2 private subnets, by Wolfgang Unger ' 


Parameters:
  ClassB:
    Description: 'Class B of IPv4 VPC (10.XXX.0.0/16)'
    Type: Number
    Default: 1
    ConstraintDescription: 'Must be in the range [0-255]'
    MinValue: 0
    MaxValue: 255

  OwnerName:
    Description: An owner name, used in tags
    Type: String
    Default: "wolfgang.unger"


################## Resources ##############################    
Resources:
### the vpc itself, no IP6 
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Sub '10.${ClassB}.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Sub 'IPv6 only VPC 10.${ClassB}.0.0/16'
      - Key: Owner
        Value: !Ref OwnerName          

  IPv6CidrBlock:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      VpcId: !Ref VPC
      AmazonProvidedIpv6CidrBlock: true

### FlowLogs
  FlowLogRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: FlowLogRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: 'logs:CreateLogGroup'
                Resource: '*'
                Effect: Allow
              - Action: 'logs:CreateLogStream'
                Resource: '*'
                Effect: Allow
              - Action: 'logs:DescribeLogGroups'
                Resource: '*'
                Effect: Allow
              - Action: 'logs:DescribeLogStreams'
                Resource: '*'
                Effect: Allow        
              - Action: 'logs:PutLogEvents'
                Resource: '*'
                Effect: Allow                                                             
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-FlowLogRole'
      - Key: Owner
        Value: !Ref OwnerName

  CloudWatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties: 
            LogGroupName: !Sub '${AWS::StackName}-FlowLogsGroup'
            RetentionInDays: 365  

  FlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
       DeliverLogsPermissionArn: !GetAtt FlowLogRole.Arn
       LogGroupName:  !Sub '${AWS::StackName}-FlowLogsGroup'
       ResourceId: !Ref VPC
       ResourceType: VPC
       TrafficType: ALL
       Tags:
       - Key: Name
         Value:  !Sub '${AWS::StackName}-FlowLog'
       - Key: Owner
         Value: !Ref OwnerName   

#### public subnets
  SubnetAPublic:
    DependsOn: IPv6CidrBlock
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      #MapPublicIpOnLaunch: true
      #CidrBlock: !Sub '10.${ClassB}.0.0/20'
      Ipv6Native: true
      Ipv6CidrBlock: 
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: '00::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]]]
      AssignIpv6AddressOnCreation: true 
      EnableDns64: true
      PrivateDnsNameOptionsOnLaunch:
        EnableResourceNameDnsAAAARecord: true
        EnableResourceNameDnsARecord: false
        HostnameType: resource-name      
      Tags:
      - Key: Name
        Value: 'A public'
      - Key: Owner
        Value: !Ref OwnerName
        
  SubnetBPublic:
    DependsOn: IPv6CidrBlock
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      #MapPublicIpOnLaunch: true
      #CidrBlock: !Sub '10.${ClassB}.16.0/20'
      Ipv6Native: true
      Ipv6CidrBlock: 
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: '01::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]]]      
      AssignIpv6AddressOnCreation: true 
      EnableDns64: true
      PrivateDnsNameOptionsOnLaunch:
        EnableResourceNameDnsAAAARecord: true
        EnableResourceNameDnsARecord: false
        HostnameType: resource-name                  
      Tags:
      - Key: Name
        Value: 'B public'
      - Key: Owner
        Value: !Ref OwnerName

## private subnets
  SubnetAPrivate:
    DependsOn: IPv6CidrBlock
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      #CidrBlock: !Sub '10.${ClassB}.32.0/20'
      Ipv6Native: true      
      Ipv6CidrBlock: 
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: '02::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]]]   
      AssignIpv6AddressOnCreation: true 
      EnableDns64: true
      PrivateDnsNameOptionsOnLaunch:
        EnableResourceNameDnsAAAARecord: true
        EnableResourceNameDnsARecord: false
        HostnameType: resource-name                  
      Tags:
      - Key: Name
        Value: 'A private'
      - Key: Owner
        Value: !Ref OwnerName 

  SubnetBPrivate:
    DependsOn: IPv6CidrBlock
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      #CidrBlock: !Sub '10.${ClassB}.48.0/20'
      Ipv6Native: true      
      Ipv6CidrBlock: 
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: '03::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]]]      
      AssignIpv6AddressOnCreation: true 
      EnableDns64: true
      PrivateDnsNameOptionsOnLaunch:
        EnableResourceNameDnsAAAARecord: true
        EnableResourceNameDnsARecord: false
        HostnameType: resource-name                  
      Tags:
      - Key: Name
        Value: 'B private'
      - Key: Owner
        Value: !Ref OwnerName      

### IGW
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: 'IGW'
      - Key: Owner
        Value: !Ref OwnerName        

  EgressOnlyInternetGateway:
    Type: 'AWS::EC2::EgressOnlyInternetGateway'
    Properties:
      VpcId: !Ref VPC

  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway


### Routes & Route Tables
## route table public
  RouteTablePublic: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'RouteTable  Public'
      - Key: Owner
        Value: !Ref OwnerName       
## public routes
  # RouteTablePublicRoute: 
  #   Type: 'AWS::EC2::Route'
  #   DependsOn: VPCGatewayAttachment
  #   Properties:
  #     RouteTableId: !Ref RouteTablePublic
  #     DestinationCidrBlock: '0.0.0.0/0'
  #     GatewayId: !Ref InternetGateway

  RouteTablePublicIpv6Route:
    Type: AWS::EC2::Route
    Properties:
      DestinationIpv6CidrBlock: ::/0
      RouteTableId: !Ref RouteTablePublic
      EgressOnlyInternetGatewayId: !Ref EgressOnlyInternetGateway               

########### route table assocations 
  RouteTableAAssociationPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetAPublic
      RouteTableId: !Ref RouteTablePublic

  RouteTableBAssociationPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetBPublic
      RouteTableId: !Ref RouteTablePublic


##Route tables private
  RouteTableAPrivate: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'RouteTable A Private'
      - Key: Owner
        Value: !Ref OwnerName

  RouteTableBPrivate: 
      Type: 'AWS::EC2::RouteTable'
      Properties:
        VpcId: !Ref VPC
        Tags:
        - Key: Name
          Value: 'RouteTable B Private'
        - Key: Owner
          Value: !Ref OwnerName  

## private routes
  PrivateSubnetADefaultIpv6Route:
    Type: AWS::EC2::Route
    Properties:
      DestinationIpv6CidrBlock: ::/0
      RouteTableId: !Ref RouteTableAPrivate
      EgressOnlyInternetGatewayId: !Ref EgressOnlyInternetGateway

  PrivateSubnetBDefaultIpv6Route:
    Type: AWS::EC2::Route
    Properties:
      DestinationIpv6CidrBlock: ::/0
      RouteTableId: !Ref RouteTableBPrivate
      EgressOnlyInternetGatewayId: !Ref EgressOnlyInternetGateway
       
########### route table assocations 
  RouteTableAssociationAPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetAPrivate
      RouteTableId: !Ref RouteTableAPrivate

  RouteTableAssociationBPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetBPrivate
      RouteTableId: !Ref RouteTableBPrivate

### ACL
  NetworkAclPublic:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'ACL Public'
      - Key: Owner
        Value: !Ref OwnerName

  NetworkAclPrivate:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'ACL Private'
      - Key: Owner
        Value: !Ref OwnerName

  # SubnetNetworkAclAssociationAPublic:
  #   Type: 'AWS::EC2::SubnetNetworkAclAssociation'
  #   Properties:
  #     SubnetId: !Ref SubnetAPublic
  #     NetworkAclId: !Ref NetworkAclPublic
  # SubnetNetworkAclAssociationAPrivate:
  #   Type: 'AWS::EC2::SubnetNetworkAclAssociation'
  #   Properties:
  #     SubnetId: !Ref SubnetAPrivate
  #     NetworkAclId: !Ref NetworkAclPrivate
  # SubnetNetworkAclAssociationBPublic:
  #   Type: 'AWS::EC2::SubnetNetworkAclAssociation'
  #   Properties:
  #     SubnetId: !Ref SubnetBPublic
  #     NetworkAclId: !Ref NetworkAclPublic
  # SubnetNetworkAclAssociationBPrivate:
  #   Type: 'AWS::EC2::SubnetNetworkAclAssociation'
  #   Properties:
  #     SubnetId: !Ref SubnetBPrivate
  #     NetworkAclId: !Ref NetworkAclPrivate


  NetworkAclEntryInPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'

  NetworkAclEntryInPublicAllowAllIPv6:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 101
      Protocol: -1
      RuleAction: allow
      Egress: false
      Ipv6CidrBlock: ::/0  

  NetworkAclEntryOutPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicAllowAllIPv6:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 101
      Protocol: -1
      RuleAction: allow
      Egress: true
      Ipv6CidrBlock: ::/0  
### private
  NetworkAclEntryInPrivateAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'

  NetworkAclEntryInPrivateAllowAllIPv6:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 101
      Protocol: -1
      RuleAction: allow
      Egress: false
      Ipv6CidrBlock: ::/0    

  NetworkAclEntryOutPrivateAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'

  NetworkAclEntryOutPrivateAllowAllIPv6:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 101
      Protocol: -1
      RuleAction: allow
      Egress: true
      Ipv6CidrBlock: ::/0     

########### Outputs #########################
## all outputs are prefixed with StackName
Outputs:

  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'

  VPC:
    Description: 'VPC.'
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC'     


  AZA:
    Description: 'AZ of A'
    Value: !Select [0, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZA'
  AZB:
    Description: 'AZ of B'
    Value: !Select [1, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZB'

  CidrBlock:
    Description: 'The set of IP addresses for the VPC.'
    Value: !GetAtt 'VPC.CidrBlock'
    Export:
      Name: !Sub '${AWS::StackName}-CidrBlock'

  # Ipv6CidrBlock:
  #   Description: 'The set of IPv6 addresses for the VPC.'
  #   Value: !GetAtt 'VPC.Ipv6CidrBlock'
  #   Export:
  #     Name: !Sub '${AWS::StackName}-Ipv6CidrBlock'

  Ipv6CidrBlocks:
      Description: Ipv6CidrBlocks
      Value:   !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ] 
      Export:
         Name: !Sub '${AWS::StackName}-Ipv6CidrBlocks'     

  InternetGateway:
    Description: 'InternetGateway.'
    Value: !Ref InternetGateway
    Export:
      Name: !Sub '${AWS::StackName}-InternetGateway'

  SubnetsPublic:
    Description: 'Subnets public.'
    Value: !Join [',', [!Ref SubnetAPublic, !Ref SubnetBPublic]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPublic'

  SubnetsPrivate:
    Description: 'Subnets private.'
    Value: !Join [',', [!Ref SubnetAPrivate, !Ref SubnetBPrivate]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPrivate'
 

  SubnetAPublic:
    Description: 'Subnet A public.'
    Value: !Ref SubnetAPublic
    Export:
      Name: !Sub '${AWS::StackName}-SubnetAPublic'


  SubnetAPrivate:
    Description: 'Subnet A private.'
    Value: !Ref SubnetAPrivate
    Export:
      Name: !Sub '${AWS::StackName}-SubnetAPrivate'
  

  SubnetBPublic:
    Description: 'Subnet B public.'
    Value: !Ref SubnetBPublic
    Export:
      Name: !Sub '${AWS::StackName}-SubnetBPublic'
          

  SubnetBPrivate:
    Description: 'Subnet B private.'
    Value: !Ref SubnetBPrivate
    Export:
      Name: !Sub '${AWS::StackName}-SubnetBPrivate'



