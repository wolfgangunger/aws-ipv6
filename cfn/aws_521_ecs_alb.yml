AWSTemplateFormatVersion: '2010-09-09'
Description: Fargate LBs & SGs

Parameters:

  ParentVPCStack:
    Description: "Stack name of the parent VPC stack"
    Type: String
    Default: IPv6VPC

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: fargate-example

  OwnerName:
    Description: An owner name, used in tags
    Type: String
    Default: "wolfgang.unger"     

Resources:
  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      GroupName: "PublicLoadBalancerSG"
      VpcId: 
         Fn::ImportValue: !Sub '${ParentVPCStack}-VPC'
      SecurityGroupIngress:
          # Allow access to ALB from anywhere on the internet
          - CidrIp: 0.0.0.0/0
            IpProtocol: -1
          - CidrIpv6: ::/0
            IpProtocol: -1
      Tags: 
        - Key: "Owner"
          Value: !Ref OwnerName
        - Key: "Name"
          Value: PublicLoadBalancerSG              

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      IpAddressType: dualstack
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        - !ImportValue
           "Fn::Sub": '${ParentVPCStack}-SubnetAPublic'    
        - !ImportValue
           "Fn::Sub": '${ParentVPCStack}-SubnetBPublic'       
      SecurityGroups: [!Ref 'PublicLoadBalancerSG']
  # A dummy target group is used to setup the ALB to just drop traffic
  # initially, before any real service target groups have been added.
  DummyTargetGroupPublic:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Join ['-', [!Ref 'EnvironmentName', 'drop-1']]
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: 
         Fn::ImportValue: !Sub '${ParentVPCStack}-VPC'

  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'DummyTargetGroupPublic'
          Type: 'forward'
      LoadBalancerArn: !Ref 'PublicLoadBalancer'
      Port: 80
      Protocol: HTTP


#############################
  PrivateLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the internal load balancer
      GroupName: "PrivateLoadBalancerSG"
      VpcId: 
          Fn::ImportValue: !Sub '${ParentVPCStack}-VPC'
      Tags: 
        - Key: "Owner"
          Value: !Ref OwnerName
        - Key: "Name"
          Value: PrivateLoadBalancerSG                  
  PrivateLoadBalancerIngressFromECS:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Only accept traffic from a container in the fargate container security group
      GroupId: !Ref 'PrivateLoadBalancerSG'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'FargateContainerSecurityGroup'

  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      GroupName: "FargateContainerSecurityGroup"
      VpcId: 
        Fn::ImportValue: !Sub '${ParentVPCStack}-VPC'
      Tags: 
        - Key: "Owner"
          Value: !Ref OwnerName
        - Key: "Name"
          Value: FargateContainerSecurityGroup         

  PrivateLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      IpAddressType: dualstack
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        # This load balancer is put into the private subnet, so that there is no
        # route for the public to even be able to access the private load balancer.
        - !ImportValue
           "Fn::Sub": '${ParentVPCStack}-SubnetAPrivate'    
        - !ImportValue
           "Fn::Sub": '${ParentVPCStack}-SubnetBPrivate'    
      SecurityGroups: [!Ref 'PrivateLoadBalancerSG']
  # This dummy target group is used to setup the ALB to just drop traffic
  # initially, before any real service target groups have been added.
  DummyTargetGroupPrivate:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Join ['-', [!Ref 'EnvironmentName', 'drop-2']]
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: 
          Fn::ImportValue: !Sub '${ParentVPCStack}-VPC'
  PrivateLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PrivateLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'DummyTargetGroupPrivate'
          Type: 'forward'
      LoadBalancerArn: !Ref 'PrivateLoadBalancer'
      Port: 80
      Protocol: HTTP



Outputs:

  PublicLoadBalancer:
    Description: The public load balancer
    Value: !Ref PublicLoadBalancer
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'PublicLoadBalancer' ] ]

  PrivateLoadBalancer:
    Description: The private load balancer
    Value: !Ref PrivateLoadBalancer
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'PrivateLoadBalancer' ] ]

  PublicLoadBalancerHostedZoneId:
    Description: The public load balancer HostedZoneId
    Value: !GetAtt PublicLoadBalancer.CanonicalHostedZoneID
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'PublicLoadBalancerHostedZoneId' ] ]

  PublicLoadBalancerDNS:
    Description: The public load balancer DNS Name
    Value:  !GetAtt PublicLoadBalancer.DNSName
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'PublicLoadBalancerHostedDNSName' ] ]      

  InternalUrl:
    Description: The url of the internal load balancer
    Value: !Join ['', ['http://', !GetAtt 'PrivateLoadBalancer.DNSName']]
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'InternalUrl' ] ]
  ExternalUrl:
    Description: The url of the external load balancer
    Value: !Join ['', ['http://', !GetAtt 'PublicLoadBalancer.DNSName']]
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'ExternalUrl' ] ]

##
  PublicListener:
    Description: The ARN of the public load balancer's Listener
    Value: !Ref PublicLoadBalancerListener
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'PublicListener' ] ]
  PrivateListener:
    Description: The ARN of the public load balancer's Listener
    Value: !Ref PrivateLoadBalancerListener
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'PrivateListener' ] ]

###
  PublicLoadBalancerSG:
    Description: The public load balancer SG
    Value: !Ref PublicLoadBalancerSG
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'PublicLoadBalancerSG' ] ]

  PrivateLoadBalancerSG:
    Description: The private load balancer SG
    Value: !Ref PrivateLoadBalancerSG
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'PrivateLoadBalancerSG' ] ]

  FargateContainerSecurityGroup:
    Description: A security group used to allow Fargate containers to receive traffic
    Value: !Ref 'FargateContainerSecurityGroup'
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'FargateContainerSecurityGroup' ] ]